# Copyright 2023 D-Wave Systems Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import glob
import platform

import numpy

# Source files for the dwave-optimization library
sources = list(glob.glob("dwave/optimization/src/**/*.cpp", recursive=True))

cython_kwargs = dict(
    annotate=True,
    language_level=3,
)

setup_kwargs = dict(
    include_dirs=[numpy.get_include()],
)

# There is a pretty significant bifurcation between windows and unix because
# on unix we distribute a dynamic library generated by setuptools_dso
if platform.system() == "Windows":
    from Cython.Build import cythonize
    from setuptools import Extension, setup

    extra_compile_args = ["/std:c++20"]

    extensions = [
        Extension("dwave.optimization.model",
                  ["dwave/optimization/model.pyx"] + sources,
                  extra_compile_args=extra_compile_args,
                  ),
        Extension("dwave.optimization.symbols",
                  ["dwave/optimization/symbols.pyx"] + sources,
                  extra_compile_args=extra_compile_args,
                  ),
    ]

    setup(
        ext_modules=cythonize(extensions, **cython_kwargs),
        **setup_kwargs,
        )

else:  # unix
    from setuptools_dso import cythonize, DSO, Extension, setup

    extra_compile_args = ["-std=c++20", "-g1"]
    extra_link_args = ["-std=c++20", "-g1"]

    extensions = [
        Extension("dwave.optimization.model",
                  ["dwave/optimization/model.pyx"],
                  dsos=["dwave.optimization.dwave-optimization"],
                  extra_compile_args=extra_compile_args,
                  extra_link_args=extra_link_args,
                  ),
        Extension("dwave.optimization.symbols",
                  ["dwave/optimization/symbols.pyx"],
                  dsos=["dwave.optimization.dwave-optimization"],
                  extra_compile_args=extra_compile_args,
                  extra_link_args=extra_link_args,
                  ),
    ]

    # note: keep this synced with the helper methods in __init__.py
    x_dsos = [
        DSO("dwave.optimization.dwave-optimization",
            sources,
            include_dirs=["dwave/optimization/include/"],
            lang_compile_args={"c++": extra_compile_args},
            gen_info=False,
            ),
    ]

    setup(
        ext_modules=cythonize(extensions, **cython_kwargs),
        x_dsos=x_dsos,
        **setup_kwargs,
        )

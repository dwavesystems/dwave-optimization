version: 2.1

orbs:
  win: circleci/windows@5.0.0
  macos: circleci/macos@2.4.1

commands:
  run-cibuildwheel:
    parameters:
      cibw-version:
        type: string
        default: 3.2.0
    steps:
      - run:
          name: run cibuildwheel
          shell: bash -eo pipefail
          command: |
            python -m pip install --user cibuildwheel==<< parameters.cibw-version >>
            python -m cibuildwheel --output-dir dist

      - store_artifacts: &store-artifacts
          path: ./dist
      - persist_to_workspace: &persist-to-workspace
          root: ./dist/
          paths: .

environment: &global-environment
  PIP_PROGRESS_BAR: 'off'

jobs:
  python-linux:
    docker:
      - image: cimg/python:3.13  # just need a version that can install cibuildwheel

    environment:
      <<: *global-environment
      CIBW_ARCHS_LINUX: x86_64

    steps:
      - checkout
      - setup_remote_docker
      - run-cibuildwheel

  python-linux-aarch64:
    machine:
      image: default

    resource_class: arm.medium

    environment:
      <<: *global-environment
      CIBW_ARCHS_LINUX: aarch64

    steps:
      - checkout
      - run-cibuildwheel

  python-linux-debug:
    docker:
      - image: cimg/python:3.10

    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python -m venv env
            . env/bin/activate
            pip install build pip --upgrade

      - run:
          name: build with -Werror
          command: |
            . env/bin/activate
            python -m build \
              -Ccompile-args="-v" \
              -Csetup-args="-Dwerror=true"

      - run:
          name: build and install with -Werror and without -NDEBUG
          command: |
            . env/bin/activate
            python -m build \
              -Ccompile-args="-v" \
              -Csetup-args="-Db_ndebug=true" \
              -Csetup-args="-Dwerror=true"
            pip install dist/dwave*optimization*.whl --force

      - run: &run-tests
          name: test with installed package
          command: |
            . env/bin/activate
            cd tests/
            pip install -r requirements.txt
            python -Werror -m unittest

  python-macOS:
    macos:
      xcode: 16.4.0  # latest as of August 2025
    resource_class: macos.m1.medium.gen1

    parameters:
      cibw-arch:
        type: string

    environment:
      <<: *global-environment
      CIBW_ARCHS_MACOS: << parameters.cibw-arch >>

    steps:
      - checkout
      - macos/install-rosetta
      - run-cibuildwheel

  python-windows:
    executor:
      name: win/default

    environment:
      <<: *global-environment
      CIBW_ARCHS_WINDOWS: AMD64

    steps:
      - checkout
      - run-cibuildwheel

  python-sdist:
    docker:
      - image: cimg/python:3.10

    steps:
      - checkout
      - run:
          name: build sdist
          command: |
            python -m venv env
            . env/bin/activate
            pip install build pip --upgrade
            python -m build --sdist
      - store_artifacts: *store-artifacts
      - persist_to_workspace: *persist-to-workspace
      - run:
          name: install from sdist
          command: |
            rm -r env
            python -m venv env
            . env/bin/activate
            pip install pip --upgrade
            pip install dist/dwave*optimization*.tar.gz
      - run: *run-tests

  python-dependencies:
    parameters:
      python-version:
        type: string
      dependency-versions:
        type: string
      only-binary:
        type: string

    docker:
      - image: python:<< parameters.python-version >>-slim

    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: install
          command: |
            python -m venv env
            . env/bin/activate
            pip install << parameters.dependency-versions >> --upgrade --only-binary << parameters.only-binary >>
            pip install dwave-optimization --no-index -f dist/ --no-deps --force-reinstall
      - run: *run-tests


  cpp-gcc:
    parameters:
      gcc-version:
        type: string

    docker:
      - image: gcc:<< parameters.gcc-version >>

    steps:
      - checkout
      - run:
          name: install python requirements
          command: |
            apt update
            apt install python3-pip python3-venv -y
      - run: &install-requirements
          name: create venv and install build dependencies
          command: |
            python3 -m venv env
            . env/bin/activate
            pip install -r requirements.txt
      - run: &run-cpp-tests
          name: run c++ tests with meson
          command: |
            . env/bin/activate
            meson setup _build -Dbuildtype=debug -Dwerror=true
            meson test -C _build

      - run: &run-cpp23-tests
          name: run c++23 tests with meson
          command: |
            . env/bin/activate
            meson configure _build -Dcpp_std=c++23
            meson test -C _build

  cpp-macOS:
    macos:
      xcode: 15.3.0
    resource_class: macos.m1.medium.gen1

    steps:
      - checkout
      - run: *install-requirements
      - run: *run-cpp-tests
      - run: *run-cpp23-tests

  serialization:
    docker:
      - image: cimg/python:3.13

    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: install dwave-optimization 0.5.2  # oldest that doesn't support serialization v1
          command: |
            python -m venv env_0.5.2
            . env_0.5.2/bin/activate
            pip install dwave-optimization==0.5.2
      - run:
          name: install latest dwave-optimization
          command: |
            python -m venv env_latest
            . env_latest/bin/activate
            pip install dist/*optimization*abi3*.whl
      - run:
          name: save models with latest and load with 0.5.2
          command: |
            cd tests/
            mkdir models
            . ../env_latest/bin/activate
            python test_serialization.py save models --version=0.1
            deactivate
            . ../env_0.5.2/bin/activate
            python test_serialization.py load models
            rm -r models
      - run:
          name: save models with 0.5.2 and load with latest
          command: |
            cd tests/
            mkdir models
            . ../env_0.5.2/bin/activate
            python test_serialization.py save models
            deactivate
            . ../env_latest/bin/activate
            python test_serialization.py load models
            rm -r models

  docs:
    docker:
      - image: cimg/python:3.10  # As of July 2024, RTD uses 3.10

    steps:
      - checkout
      - attach_workspace:
          at: dist

      - run:
          name: install doxygen
          command: |
            sudo apt update
            sudo apt install doxygen

      - run:
          name: install package and docs dependencies
          command: |
            python -m venv env
            . env/bin/activate
            pip install dist/*optimization*cp310*.whl -r docs/requirements.txt

      - run:
          name: build docs
          command: |
            . env/bin/activate
            make -C docs cpp html

      - store_artifacts:
          path: docs/build/html

      - run:
          name: doctest
          command: |
            . env/bin/activate
            make -C docs doctest

  deploy:
    docker:
      - image: cimg/python:3.10

    steps:
      - attach_workspace:
          at: dist

      - store_artifacts:
          path: ./dist

      - run:
          name: deploy
          command: |
            python -m venv env
            . env/bin/activate
            python -m pip install twine
            twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*

workflows:
  tests:
    jobs:
      - python-linux:
          filters: &tags
            # also run on tags so the deploy pipeline works
            tags:
              only: &version-string /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
      - python-linux-aarch64:
          filters: *tags
      - python-linux-debug
      - python-macOS:
          matrix:
            parameters:
              cibw-arch: [x86_64, arm64]
          filters: *tags
      - python-windows:
          filters: *tags
      - python-sdist:
          filters: *tags
      - python-dependencies:
          name: python-dependencies-oldest
          python-version: "3.10"
          dependency-versions: numpy==1.21.3
          only-binary: numpy
          requires:
            - python-linux
      - python-dependencies:
          name: python-dependencies-latest
          python-version: "3.14"
          dependency-versions: numpy
          only-binary: numpy
          requires:
            - python-linux
      - cpp-gcc:
          name: cpp-gcc-<< matrix.gcc-version >>
          matrix:
            parameters:
              gcc-version: ["12", "latest"]
      - cpp-macOS
      - serialization:
          requires:
            - python-linux
      - docs:
          requires:
            - python-linux
      - deploy:
          filters:
            tags:
              only: *version-string
            branches:
              ignore: /.*/
          requires:
            - python-linux
            - python-linux-aarch64
            - python-macOS
            - python-windows
            - python-sdist
